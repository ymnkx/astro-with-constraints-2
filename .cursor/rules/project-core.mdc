---
description:
globs:
alwaysApply: true
---
# Project Rules

これは Astro を基盤としたデザインシステム・フロントエンド開発プロジェクトです。以下のルールに従ってコード生成・編集を行ってください。

## ディレクトリ・ファイル命名規則

### 命名規則
- ディレクトリ名：PascalCase
- ファイル名：PascalCase（コンポーネント）、kebab-case（その他）
- 略語は使用しない（例：`img` → `image`）
- 日本語ファイル名・ディレクトリ名は禁止

### 基本構成
- `/src/` - ソースコード
- `/documents/` - プロジェクト関連ドキュメント
- `/tokens/` - デザイントークン定義
- `/scripts/` - Node.js用スクリプト
- `/public/` - 静的ファイル

## アセット管理ルール

### 画像
- WebP形式を優先
- `/public/assets/image/` に配置
- ファイル名は分かりやすい命名

### アイコン
- SVGスプライト方式を採用
- `/src/icons/` に素材SVGファイルを配置
- `/public/assets/svg/icons.svg` にSVGスプライトを配置
- IconコンポーネントでSVGスプライトを参照
- Iconコンポーネントを使用して配置

## コード品質・レビュー要件

### 必須チェック項目
- TypeScriptエラーなし
- SCSSコンパイルエラーなし
- デザイントークンの適切な使用
- CSS命名規則準拠
- コンポーネント設計の妥当性

### 禁止事項
- ハードコーディングされた値の使用
- `px` 単位の使用（border-width以外）
- `any` 型の使用
- Astroファイル内での `<style>` `<script>` タグ使用
- 日本語ファイル名・ディレクトリ名

## コード生成時の注意点

1. 新しいコンポーネントを作成する際は、必ず2ファイル（.astro, .scss）をふくめ、必要に応じてTypeScriptファイル（.ts）を追加する
2. 既存のコンポーネントパターンを参考にする
3. デザイントークンを活用したスタイリング
4. TypeScript型定義を適切に行う
5. BEM命名規則に従ったCSS設計

---

**重要**: このプロジェクトはデザインシステムの一貫性を重視します。上記ルールに従って、品質の高いコードを生成してください。